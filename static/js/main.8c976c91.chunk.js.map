{"version":3,"sources":["clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","startTime","Date","time","tick","bind","this","setState","setInterval","text","num","distance","days","Math","floor","hours","minutes","seconds","daysDisplay","checkPlural","hoursDisplay","minutesDisplay","secondsDisplay","message","i","window","location","reload","className","React","Component","App","onEnterViewport","console","log","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c976c91.chunk.js","sourcesContent":["import React from 'react';\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startTime: new Date(),\n            time: new Date()\n        };\n        this.tick = this.tick.bind(this);\n    }\n    tick() {\n        this.setState(\n            { time: new Date() }\n        )\n    }\n    componentDidMount() {\n        setInterval(this.tick, 1000)\n    }\n    checkPlural(text, num) {\n        if (num === 0) {\n            return text;\n        }\n        else if (num === 1) {\n            return \"\";\n        }\n        else {\n            return text;\n        }\n    }\n\n\n    render() {\n        let distance = this.state.time - this.state.startTime;\n        let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n        let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n        let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n        const daysDisplay = days > 0 ? (<div><span>{days} day{this.checkPlural(\"s\", days)},</span><br /></div>) : null\n        const hoursDisplay = hours > 0 ? (<div><span>{hours} hour{this.checkPlural(\"s\", hours)},</span><br /></div>) : null\n        const minutesDisplay = minutes > 0 ? (<div><span>{minutes} minute{this.checkPlural(\"s\", minutes)} and</span><br /></div>) : null\n        const secondsDisplay = (<div><span>{seconds} second{this.checkPlural(\"s\", seconds)}</span></div>)\n        \n        // Le message\n        let message = (<span>Congratulations!</span>);\n        if (minutes >= 1) message = (<span>Its been over a  minute. Do you not have anything else to do?</span>);\n        if (minutes >= 5) message = (<span>Still got nothing to do?</span>);\n        if (minutes >= 10) message = (<span>So... how's life?</span>);\n        if (minutes >= 20) message = (<span>Why are you even here?</span>);\n        if (minutes >= 30) message = (<span>Ok this is getting ridiculous...</span>);\n        if (minutes >= 50) message = (<span>Are you trying to reach an hour? Well you're close</span>);\n        if (hours >= 1) message = (<span>Congratulations on spending 1 hour of your life like this (If you have been here without switching tabs or looking away, I salute you)</span>);\n        if (hours >= 1 && minutes >= 30) message = (<span>Ok at this point... you should probably close this site</span>)\n        if (hours >= 2) message = (<span>This is the last message. Now leave</span>);\n        if (hours >= 3) message = (<span>Just leave... Theres nothing to wait for. No suprises</span>);\n        if (hours >= 5) message = (<span>Dude seriously, just leave</span>);\n        if (hours >= 6) message = (<span>Now I feel like you forgot to close this tab. Just close it and leave</span>);\n        if (hours >= 10) message = (<span>Bruh.</span>);\n        if (hours >= 22) message = (<span>Do you even sleep? Or did you just leave your computer turned on?</span>);\n        if (days >= 1) message = (<span>Its over a day. What are you doing with your life?</span>);\n        if (days >= 1 && hours >= 2) message = (<span>Im running out of things to say now</span>);\n        if (days >= 2) message = (<span>Theres no secret message at 10 days. Shoo</span>);\n        if (days >= 3) message = (<span>I really want a power outage so that you can CLOSE THIS DAMN TAB. JUST LEAVE FFS</span>);\n        if (days >= 5) message = (<span>Wtf are you even here for? I told you, theres nothing at 10 days</span>);\n        if (days >= 6) message = (<span>Im not talking to you now</span>);\n        if (days >= 6 && hours >= 1) message = null;\n        if (days >= 7) message = (<span>7 DAYS! ARE YOU OUT OF YOUR MIND?</span>);\n        if (days >= 8) message = (<span>I have nothin to say at this point</span>);\n        if (days === 10) message = (<span>Congratulations on reaching 10 days! As I said there is no suprise. So i will now refresh myself</span>);\n        if (days === 10 && seconds >= 60) message = (<span>Haha i was kidding</span>);\n        if (days === 10 && minutes >= 2) message = (<span>I will refresh in 10 seconds...</span>);\n        if (days === 10 && minutes >= 2) {\n            for(let i=0;i<=9;i++){\n                if (seconds === i){\n                    message = (<span>I will refresh in {i+1} seconds...</span>);\n                    break;\n                }\n            }\n        }\n        if (days >= 10 && minutes >= 10) {\n            window.location.reload();\n        }\n        //Le message end\n        return (\n            <div className=\"clock\">\n                <br />\n                <span className=\"head\">You have wasted</span>\n                {daysDisplay} {hoursDisplay} {minutesDisplay} {secondsDisplay}\n            <span className=\"head\">on this website.<br />{message}</span>\n            </div>\n        );\n    }\n}\n\nexport default Clock;","import React from 'react';\nimport './App.css';\nimport Clock from './clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock onEnterViewport={()=>console.log('enter')}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}